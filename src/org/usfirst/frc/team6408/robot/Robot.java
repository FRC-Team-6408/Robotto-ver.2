// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team6408.robot;

import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc.team6408.robot.commands.*;
import org.usfirst.frc.team6408.robot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    
    public static DriveSub driveSub;
    public static ArmSub armSub;
    public static ClawSub clawSub;
    public static WinchSub winchSub;
    public static OI oi;
    
    public void robotInit() {
    	
    	RobotMap.init();  //I like this placement
    
        driveSub = new DriveSub();
        armSub = new ArmSub();
        clawSub = new ClawSub();
        winchSub = new WinchSub();
        
        //Oh shit, if you move this statement above any other subsystems it grabs null pointers and bad shit goes down.
        oi = new OI();  //Don't fucking touch this.

        autonomousCommand = new AutonomousCommand();  //instantiate the auto command.
    }

    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	//INCORRECT VERSION:
    	
        //Choose the correct auto command
    	//DriverStation.getInstance().getGameSpecificMessage();
    	
    	//String gameData;  
    	//gameData = DriverStation.getInstance().getGameSpecificMessage();  //Will give string like "LLR"
    	
        if (autonomousCommand != null) autonomousCommand.start();
    }

    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }
    
    public DigitalOutput led = new DigitalOutput(9);

    public void teleopInit() {
    	led.enablePWM(1.0);
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    public void teleopPeriodic() {
    	driveSub.setSpeedLR(
    		oi.ps4Controller.getX() + oi.ps4Controller.getY(), 
    		oi.ps4Controller.getX() - oi.ps4Controller.getY()
    	);
    	
    	armSub.setArmSpeed(oi.ps4Controller.getRawAxis(5));  //controll arm with joystick 2.
    	
    	
    	led.pulse(oi.ps4Controller.getY() * 100);
    	System.out.print(oi.ps4Controller.getY() * 100);
    	//System.out.print(5.7);
    	
        Scheduler.getInstance().run();
    }

    
    public void testInit() {
    	//init
    	
    	//System.out.print("Woah111\n");
    }	
    
    //public static byte ledCode[] = {(byte) 255};
  
    public void testPeriodic() {
    	//ledCode[9] = (byte) 170;
    	
    	
    	//led.set(oi.ps4Controller.getRawButton(1));
    	
    	
    	
    	//hahahahahahaha nope.
        LiveWindow.run();
    }
}
