// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team6408.robot;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc.team6408.robot.commands.*;
import org.usfirst.frc.team6408.robot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static DriveSub driveSub;
    public static ArmSub armSub;
    public static ClawSub clawSub;
    public static WinchSub winchSub;
    public static OI oi;
    
    //Maybe variables fixes it?
    public UsbCamera usbCam1;
    public UsbCamera usbCam2;

    public void robotInit() {

    	RobotMap.init();  //I like this placement

    	//Set up two cameras.
    	usbCam1 = CameraServer.getInstance().startAutomaticCapture();
    	usbCam2 = CameraServer.getInstance().startAutomaticCapture();

        driveSub = new DriveSub();
        armSub = new ArmSub();
        clawSub = new ClawSub();
        winchSub = new WinchSub();

        //Oh shit, if you move this statement above any other subsystems it grabs null pointers and bad shit goes down.
        oi = new OI();  //Don't fucking touch this.

        autonomousCommand = new AutonomousCommand();  //instantiate the auto command.
    }

    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	//Move speed is 40% (0.4), for 4 seconds (4 s)
    	//Remember to change both the comment AND the actual code.
    	autonomousCommand = new SetSpeedLRForTime(0.385, 0.4, 5);
    	
        if (autonomousCommand != null) autonomousCommand.start();
    }

    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    public void teleopPeriodic() {
    	// IF FORWARDS DOWSN'T WORK RIGHT, REMOVE THE NEGITAVE SIGN.
    	// -GABE
    	
        // Controller drive
    	  driveSub.setSpeedLR(
    		    oi.ps4Controller.getX(),
    		    -oi.ps4Controller.getRawAxis(5)  // Remove this negitave sign if it doesn't work right 
    	  );
    	  
    	// Arm is no longer controlled with the joystick.
        // Controll arm with joystick 2
    	// ArmSub.setArmSpeed(oi.ps4Controller.getRawAxis(5));  //controll arm with joystick 2.

        Scheduler.getInstance().run();
    }

    public void testInit() {

    }

    public void testPeriodic() {
    	  //hahahahahahaha nope.
        LiveWindow.run();
    }
}
